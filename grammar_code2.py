from PyQt6.QtWidgets import QTabBar, QTableWidget, QTableWidgetItem, QMessageBox,QMainWindow
from grammar import Ui_MainWindow
from pymongo import MongoClient
from bson import ObjectId
#MongoDB Connection
client=MongoClient("mongodb://localhost:27017/")
db=client["exam_db"]
collection=db["grammar"]
class Grammar_content(QMainWindow,Ui_MainWindow):#K·∫ø th·ª´a l·ªõp cha v√† giao di√™n
    def  __init__(self, topic_name,main_window):
        super().__init__()  # Kh·ªüi t·∫°o QMainWindow
        self.setupUi(self)  # G·ªçi setup giao di·ªán t·ª´ Ui_MainWindow
        self.topic_name = topic_name  # L∆∞u ch·ªß ƒë·ªÅ ƒë√£ ch·ªçn
        self.load_theory()  # Hi·ªÉn th·ªã n·ªôi dung c·ªßa ch·ªß ƒë·ªÅ
        self.pushButton_3.clicked.connect(self.back)
        self.main_window =main_window

    def load_theory(self):
        topic = collection.find_one({"type": self.topic_name})
        if topic:
        # Hi·ªÉn th·ªã ch·ªß ƒë·ªÅ trong QLabel
            self.label_3.setText(topic["type"])
            content_text = ""
            for type_data in topic["types"]:
                content_text += f"üìå **{type_data['name']}**\n\n"
                # N·∫øu structure l√† chu·ªói ƒë∆°n gi·∫£n
                if isinstance (type_data["structure"], str):
                    content_text += f"üîπ **Structure:** {type_data['structure']}\n\n"
                    # N·∫øu structure l√† object (c√≥ short_adj, long_adj)
                elif isinstance (type_data["structure"], dict):
                    for key, value in type_data["structure"].items():
                        content_text += f"üîπ **{key.replace('_', ' ').title()}**: {value}\n"
                    # Th√™m Examples
                    content_text += "\nüìñ **Examples:**\n"
                    for example in type_data["examples"]:
                        content_text += f"- {example}\n"

                    content_text += "\n" + "-" * 50 + "\n\n"  # Th√™m kho·∫£ng c√°ch gi·ªØa c√°c types

                # Hi·ªÉn th·ªã n·ªôi dung trong QTextBrowser
                    self.textBrowser.setText(content_text)
                else:
                    self.label_3.setText("Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu.")
    def back(self):
        self.main_window.show()  # Hi·ªÉn th·ªã l·∫°i c·ª≠a s·ªï ch√≠nh
        self.close()




